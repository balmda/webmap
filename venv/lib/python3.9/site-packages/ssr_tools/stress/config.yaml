#############################################
# Default configuration file for pyBNA
#
# Optional settings are commented out
# In general, optional parameters can be
# deduced through code so you'd only
# want to specify these if you have an
# unusual circumstance
#############################################
srid: 2229
units: mi # units for speed limit, width, etc.
          # Either km (metric) or mi (imperial), default is "mi" if not given.
          # Note this only affects OSM importing and the units used for
          # LTS lookups. Any distances given in the rest of this config file
          # are in the units of the map projection

db:
    user: 
    password: 
    host: 
    dbname: 

bna:
    network:
        roads:
            table: "automated.segments"
            geom: "geom"
            uid: "p_key"
            fclass: "fclass"
            source_column: "int_from"
            target_column: "int_to"
            oneway: {name: "oneway", forward: 'T', backward: 'F'}
            stress:
                segment:
                    forward: ft_seg_stress
                    backward: tf_seg_stress
                crossing:
                    forward: ft_int_stress
                    backward: tf_int_stress
        intersections:
            table: "automated.intersections"
            geom: "geom"
            uid: "int_pkey"
            cluster_distance: 1
        ped_crossings:
            table: "automated.ped_crossings"
            geom: "geom"
            uid: "p_key"
            cluster_distance: 1
            stress: 'ped_crossing_stress'

stress:
    lookup_tables:
        shared: "generated.stress_shared_ssrc_v1"
        bike_lane: "generated.stress_bike_lane_ssrc_v1"
        crossing: "generated.stress_crossing_ssrc_v1"
        # crossing: "generated.stress_crossing"
        track: "generated.stress_track_ssrc_v1"

    segment:
        forward:
            lanes: ft_lanes
            oneway: {name: "oneway_bool", val: True}    # given as a pair (column_name, value)
            aadt: aadt
            centerline: {name: "centerline", val: True}  # given as a pair (column_name, value)
            speed: speed_limit
            parking: {name: "parking", val: TRUE}
            # width: width
            low_parking: {name: "low_parking", val: TRUE}
            # parking_width: ft_park_width
            bike_infra: {name: "ft_bikeway_stress", lane: 2, buffered_lane: 6, track: 4, path: 1}
            separation_type: {name: "pbl_major_separation", val: True}
            # bike_lane_width: bikeway_width
        backward:
            lanes: tf_lanes
            oneway: {name: "oneway_bool", val: TRUE}
            aadt: aadt
            centerline: {name: "centerline", val: True}  # given as a pair (column_name, value)
            speed: speed_limit
            parking: {name: "parking", val: TRUE}
            # width: width
            low_parking: {name: "low_parking", val: TRUE}
            # parking_width: ft_park_width
            bike_infra: {name: "tf_bikeway_stress", lane: 2, buffered_lane: 6, track: 4, path: 1}
            separation_type: {name: "pbl_major_separation", val: True}
            # bike_lane_width: bikeway_width

    crossing:
        intersection_tolerance: 20
        control:
            # control is required
            table: automated.intersections
            geom: geom
            column:
                name: "control_simple"
                four_way_stop: "All-Way Stop Sign"
                signal: "Traffic Signal"
                rrfb: "rrfb"
                hawk: "hawk"
                bike_signal: "Bike Traffic Signal"
        island:
            table: automated.intersections
            geom: geom
            column:
                name: "island"
                value: True
        forward:
            lanes: tot_lanes
            speed: speed_limit
            aadt: aadt
            oneway:  {name: "oneway_bool", val: TRUE}
            # control: ft_control
            # island: ft_island
        backward:
            lanes: tot_lanes
            speed: speed_limit
            aadt: aadt
            oneway:  {name: "oneway_bool", val: TRUE}
            # control: tf_control
            # island: tf_island
    ped_crossing: 
        crossing_tolerance: 40
        params: 
            lanes: tot_lanes
            speed: speed_limit
            aadt: aadt
            oneway: {name: "oneway", val: True} 
            island: island
            control:
                name: "control_simple"
                four_way_stop: "All-Way Stop Sign"
                signal: "Traffic Signal"
                rrfb: "rrfb"
                hawk: "hawk"
            
    assumptions: # NOTES, these are not used. All gaps are filled within 02_gap_filling.sql
        segment:
            lanes:
                - where: "fclass LIKE '%Arterial%'"
                  val: 2
                - where: "fclass IN ('Residential')"
                  val: 0
                - else: 1
            speed:
                - where: "fclass LIKE '%Arterial%'"
                  val: 35
                - where: "fclass LIKE '%Collector%'"
                  val: 30
                - where: "fclass IN ('Residential')"
                  val: 25
                - else: 25
            width:
                - where: "*"
                  val: 5
            parking:
                - where: "*"
                  val: True
            low_parking:
                - where: "fclass LIKE '%Arterial%'"
                  val: False
                - where: "fclass LIKE '%Collector%'"
                  val: False
                - else: False
            parking_width:
                - where: "*"
                  val: 8
            bike_lane_width:
                - where: "*" 
                  val: 5
            separation_type:
                - where: "ft_bikeway = 4 OR tf_bikeway = 4"
                  val: TRUE
            centerline:
                - where: "fclass LIKE '%Arterial%'"
                  val: True
                - where: "fclass LIKE '%Collector%'"
                  val: True
                - where: "fclass IN ('Residential')"
                  val: False
                - else: False
            aadt:
                - where: "fclass LIKE '%Arterial%'"
                  val: 20000
                - where: "fclass LIKE '%Collector%'"
                  val: 15000
                - where: "fclass IN ('Residential')"
                  val: 500
                - else: 750

        crossing:
            priority:
                - where: "fclass LIKE '%Arterial%'"
                  meets: "*"
                  meets: "fclass IN ('Residential')"
                - where: "fclass LIKE '%Collector%'"
                  meets: "fclass IN ('Residential')"
