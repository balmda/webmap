import geopandas as gpd
import pandas as pd
import os
from numpy import log
from ssr_tools.dbutils.dbutils import *
import h3
import json
from shapely.geometry import Polygon

class HexGrid(DBUtils):
    def __init__(self, 
                host='ssrc-db2.c9lbv7c8ir6a.us-east-2.rds.amazonaws.com', db_name=None, 
                user='postgres', password='g.&whu1*Q(Ndsn,j', port='5432', verbose=True):
        
        self.verbose = verbose
        if self.verbose: print('Creating hexgrid object')

        if db_name is not None:
            self.host = host
            self.db_name = db_name
            self.user = user 
            self.port = port
            self.password = password
            DBUtils.__init__(self, host=host, db_name=db_name, user=user, password=password, port=port,
                            verbose=verbose, filename=__file__)
        else: 
            raise ValueError('Need db connection info')
        
        self.dir = os.path.dirname(os.path.abspath(__file__))
        self.sql_dir = os.path.join(self.dir, 'sql')
        print(self.sql_dir)
        if self.verbose: print('Alrighty, ready to go.')

    def get_h3_from_gdf(self, gdf, res, buffer=None):
        """get H3 grid from a GeoDataFrame"""
        if buffer is not None: 
            if gdf.crs.to_epsg() == 4326: 
                raise ValueError('Cannot buffer GDF with a SRID of 4326. Make sure your SRID is feet or meters, not degrees.')
            else: 
                gdf = gdf.buffer(distance=buffer)
        
        if gdf.crs.to_epsg() != 4326: 
            gdf = gdf.to_crs(crs='EPSG:4326')

        gdf_json = gdf.to_json()
        geojson_dict = json.loads(gdf_json)
        hexes = h3.polyfill(geojson_dict['features'][0]['geometry'], res, geo_json_conformant=True)
        polygonise = lambda hex_id: Polygon(h3.h3_to_geo_boundary(hex_id, geo_json=True))
        all_polys = gpd.GeoSeries(list(map(polygonise, hexes)), index=hexes, crs="EPSG:4326")
        
        return all_polys
    
    def make_hexgrid_sql(self, table, out_table, geom='geom', out_schema=None, cell_width = 0.125, buffer=0, srid=None, where_clause=False): 
        self.schema, self.table = self.parse_table_name(name=table)
        if self.schema is None :
            raise ValueError("Need to have schema qualitified crash table")
        
        if out_schema is None:
            raise ValueError("You need to provide an output schema.")
        else:
            self.out_schema = out_schema
        self.out_table = out_table

        self.cell_width = cell_width
        self.buffer = buffer
    
        self.table_pkey = self.get_pkey(self.table, self.schema)
        if self.table_pkey is None:
            raise ValueError("Where is your p key???.")

        self.table_geom = geom
        self.table_srid = self.find_srid_sql(table=self.table, schema=self.schema, geom = self.table_geom)
        
        if self.verbose: print(f'{self.table} has been loaded')
        if self.verbose: print(f'table SRID: {self.table_srid}')
        
        if self.verbose: print('setting up SQL substitions')
        self.sql_subs = {          
            'schema': sql.SQL(self.schema),
            'table': sql.SQL(self.table),
            'geom': sql.SQL(self.table_geom),
            
            'out_schema': sql.SQL(self.out_schema),
            'out_table': sql.SQL(self.out_table),

            'cell_width': sql.Literal(self.cell_width), 
            'srid': sql.Literal(self.table_srid), 
            'buffer': sql.Literal(self.buffer), 
            'where_if': sql.SQL(''),
            'where_clause': sql.SQL('')
        }

        hex_subs = self.dict_merge(self.sql_subs,{})

        if where_clause != False:
            hex_subs['where_if'] = sql.SQL("WHERE")
            hex_subs['where_clause'] = sql.SQL(where_clause)

        if self.verbose: print('making hex')
        self.execute_sql_script(
            file_name="make_hex.sql",
            subs=hex_subs,
            db_name=self.db_name,
            commit_changes=True
            )
        if self.verbose: print("yeah, I'm done.")    


#--------
# TESTING 

# with open('/Users/balmdale/code/aws_admin/host.txt') as f:
#     host = f.readline().rstrip('\n')
#     password = f.readline()
#     f.close
# db = DBUtils(host=host, password=password, db_name = 'p011_nchrp_08_149')

# state_boundary_df = gpd.read_postgis(
#     """
#     SELECT 
#         d.geom, 
#         a.county_nam
#     FROM 
#         received.ca_state a, 
#         ST_Dump(a.geom) d
#     ;""", 
#     con=db.create_db_con()[0], 
#     geom_col='geom', 
#     crs='EPSG:3310'
# )
# gdf_la = state_boundary_df.query("county_nam == 'San Diego'")

# x = HexGrid(db_name='p011_nchrp_08_149')

# h3 = x.get_h3_from_gdf(gdf_la, 6, buffer=50)
# h3.plot()
# h3.to_file('/Users/balmdale/code/P011_NCHRP_08-149/bb3.shp')

# x.make_hexgrid_sql(
#     table = 'received.ca_state', 
#     out_table = 'sd_hex', 
#     geom='geom', 
#     out_schema='scratch', 
#     cell_width = 5280*0.5, 
#     buffer=None, 
    # srid=3310, 
    # where_clause = "county_nam = 'San Diego'"
    # )

