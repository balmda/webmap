DROP TABLE IF EXISTS scratch.bound_extent; 
WITH 
    a AS (
        SELECT 
            ST_XMIN(ST_Transform({geom}, {srid})) AS s_xmin 
        FROM {schema}.{table} 
        {where_if} {where_clause}
        ORDER BY ST_XMIN({geom}) ASC LIMIT 1),
    b AS (
        SELECT 
            ST_YMIN(ST_Transform({geom}, {srid})) AS s_ymin 
        FROM {schema}.{table}
        {where_if} {where_clause}
        ORDER BY ST_YMIN({geom}) ASC LIMIT 1),
    c AS (
        SELECT 
            ST_XMAX(ST_Transform({geom}, {srid})) AS s_xmax 
        FROM {schema}.{table}
        {where_if} {where_clause}
        ORDER BY ST_XMAX({geom}) DESC LIMIT 1),
    d AS (
        SELECT 
            ST_YMAX(ST_Transform({geom}, {srid})) AS s_ymax 
        FROM {schema}.{table}
        {where_if} {where_clause}
        ORDER BY ST_YMAX({geom}) DESC LIMIT 1)
SELECT 
    a.s_xmin, 
    b.s_ymin, 
    c.s_xmax, 
    d.s_ymax 
INTO scratch.bound_extent
FROM a 
    LEFT JOIN b
        ON 1=1
    LEFT JOIN c 
        ON 1=1 
    LEFT JOIN d 
        ON 1=1
;

ALTER TABLE scratch.bound_extent ADD COLUMN p_key SERIAL PRIMARY KEY; 
-- CREATE INDEX sidx_scratch_bound_extent_geom ON scratch.bound_extent USING GIST ({geom});
ANALYZE scratch.bound_extent;

DROP TABLE IF EXISTS {out_schema}.{out_table};
CREATE TABLE {out_schema}.{out_table} (
    p_key SERIAL NOT NULL PRIMARY KEY, 
    study BOOLEAN DEFAULT FALSE,
    area_sqmi NUMERIC
);

SELECT addgeometrycolumn('{out_schema}', '{out_table}','geom', 0, 'POLYGON', 2);

CREATE OR REPLACE FUNCTION genhexagons(width float, xmin float,ymin float,xmax float,ymax float) RETURNS float AS $total$

declare
    b float :=width/2;
    a float :=b/2; --sin(30)=.5
    c float :=2*a;
    height float := 2*a+c;  --1.1547*width;
    ncol float :=ceil(abs(xmax-xmin)/width);
    nrow float :=ceil(abs(ymax-ymin)/height);

  polygon_string varchar := 'POLYGON((' ||

                                        0 || ' ' || 0     || ' , ' ||
                                        b || ' ' || a     || ' , ' ||
                                        b || ' ' || a+c   || ' , ' ||
                                        0 || ' ' || a+c+a || ' , ' ||
                                     -1*b || ' ' || a+c   || ' , ' ||
                                     -1*b || ' ' || a     || ' , ' ||
                                        0 || ' ' || 0     ||
                                '))';

BEGIN
    INSERT INTO {out_schema}.{out_table} (geom) 
    SELECT 
        st_translate(geom, 
        x_series*(2*a+c)+xmin, 
        y_series*(2*(c+a))+ymin)
    from 
        generate_series(0, ncol::int , 1) as x_series,
        generate_series(0, nrow::int,1 ) as y_series,
    (
       SELECT polygon_string::geometry as geom
       UNION
       SELECT ST_Translate(polygon_string::geometry, b , a+c) as geom
    ) as two_hex;

    ALTER TABLE {out_schema}.{out_table} ALTER COLUMN geom TYPE geometry(Polygon, {srid})
    USING ST_SetSRID(geom,{srid});
    RETURN NULL;

END;

$total$ LANGUAGE plpgsql;


-- run function
SELECT genhexagons( 
    {cell_width}, -- size of cell
    s_xmin,
    s_ymin,
    s_xmax,
    s_ymax )
FROM scratch.bound_extent
;

CREATE INDEX sidx_{out_schema}_{out_table}_geom  ON {out_schema}.{out_table} USING GIST (geom);
ANALYZE {out_schema}.{out_table} (geom);

-- drop cells outside of city boundary
UPDATE {out_schema}.{out_table} a 
SET study = TRUE
FROM {schema}.{table} b 
WHERE ST_Intersects(a.geom, b.{geom})
; 

DELETE FROM {out_schema}.{out_table} 
WHERE NOT study 
; 

UPDATE {out_schema}.{out_table}
SET area_sqmi = ST_Area(geom) / 1609.34^2
;

-- DROP TABLE IF EXISTS scratch.bound_extent;