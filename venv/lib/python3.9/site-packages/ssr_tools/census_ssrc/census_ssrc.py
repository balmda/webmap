import pandas as pd
import numpy as np
import warnings
from census import Census
import os
from ssr_tools.dbutils.dbutils import *
import us, re
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 500)

db = DBUtils(db_name = 'ssrc_testing', 
            host='ssrc-db2.c9lbv7c8ir6a.us-east-2.rds.amazonaws.com')

db = DBUtils(db_name = 'p014_sfmta_bike_plan', 
            host='ssrc-db2.c9lbv7c8ir6a.us-east-2.rds.amazonaws.com')


#testing
class Census_SSRC(Census):
    def __init__(self, census_api_key='6a838d799f93084fd3b326c57a3c4f0a43379654',
                db_conn=False, 
                host='ssrc-db2.c9lbv7c8ir6a.us-east-2.rds.amazonaws.com', db_name=None, 
                user='postgres', password='g.&whu1*Q(Ndsn,j', port='5432', verbose=True, outpath=None):
        self.verbose = verbose
        if self.verbose: print("Setting up Census_SSRC object")

        self.api_key = census_api_key
        self.c = Census(self.api_key)

        if db_conn: 
            print('Setting up db connection')
            if db_name is None :
                raise ValueError("Need to point to a database") 
            self.host = host
            self.db_name = db_name
            self.user = user 
            self.port = port
            self.password = password
            DBUtils.__init__(self, host=host, db_name=db_name, user=user, password=password, port=port,
                            verbose=verbose, filename=__file__)
        
        self.common_acs_tables_dict = {
                            'B02001_001E': 'tot_pop',
                            'B01001_002E': 'tot_male',
                            'B01001_026E': 'tot_female',
                            'B03002_003E': 'tot_white', 
                            'B03002_012E': 'tot_hispanic', 
                            'B03002_004E': 'tot_black', 
                            'B03002_005E': 'tot_amer_indian', 
                            'B03002_006E': 'tot_asian',
                            'B03002_007E': 'tot_pac_islander', 
                            'B03002_008E': 'tot_other_race', 
                            'B19013_001E': 'median_hh_income', 
                            'NAME': 'name',
                            'B08301_001E': 'tot_commute',
                            'B08301_002E': 'car',
                            'B08301_003E': 'car_Drove alone',
                            'B08301_004E': 'car_carpooled',
                            'B08301_005E': 'car_carpooled_2',
                            'B08301_006E': 'car_carpooled_3',
                            'B08301_007E': 'car_carpooled_4',
                            'B08301_008E': 'car_carpooled_6',
                            'B08301_009E': 'car_carpooled_7_or_more',
                            'B08301_010E': 'transit',
                            'B08301_011E': 'transit_bus',
                            'B08301_012E': 'transit_subway',
                            'B08301_013E': 'transit_train',
                            'B08301_014E': 'transit_light_rail',
                            'B08301_015E': 'transit_ferryboat',
                            'B08301_016E': 'taxicab',
                            'B08301_017E': 'motorcycle',
                            'B08301_018E': 'bicycle',
                            'B08301_019E': 'walked',
                            'B08301_020E': 'other_means',
                            'B08301_021E': 'worked_from_home',
                            'B17017_002E': 'tot_hh_below_pov',
                            'B17017_001E': 'tot_hh'
                            }

        self.rename_dict = {
                            'GEO_ID':'GEO_ID',
                            'state':'state_fips',
                            'county':'county',
                            'tract': 'tract',
                            'block group': 'block_group'
                            }
        self.rename_dict.update(self.common_acs_tables_dict)

    def get_place_fips(self, place_name): 
        url = 'https://www2.census.gov/geo/docs/reference/codes2020/national_place2020.txt'
        fips_source = pd.read_csv(url, sep='|')
        location = fips_source.query(f"PLACENAME == '{place_name}'")
        state_name = location.iloc[0]['STATE']
        state_fips = location.iloc[0]['STATEFP']
        county_name = location.iloc[0]['COUNTIES']
        place_name = location.iloc[0]['PLACENAME']
        place_fips = location.iloc[0]['PLACEFP']
        print(f'{state_name}({state_fips}) -> {county_name} -> {place_name} -> Place FIPS ==  {place_fips}')
        return place_fips
    
    def get_state_fips(self, state):
        """Clean up a state name into a FIPS code."""
        state = str(state)
        if re.compile('^[a-zA-Z]+$').match(state) is not None:
            try:
                return getattr(us.states, state.upper()).fips
            except:
                raise ValueError("That's not a valid state name.")
        # if input are number, we can probably safely assume they are FIPS unless the value is greater than 2
        elif re.compile('^[0-9]+$').match(state) is not None:
            if len(state) > 2:
                raise Exception("That FIPS code is too long to be a state.")
            else:
                return state.rjust(2, '0')
        else:
            raise ValueError("That state name isn't in a suitable format")

    def get_counties_in_state(self, state):
        state_fips = self.get_state_fips(state)
        counties = self.c.sf1.get(('NAME'), geo={'for': 'county:*','in': f'state:{state_fips}'})
        counties = pd.DataFrame(counties)
        counties = counties.set_index('NAME').rename(
            columns={'county': 'county_fips'})
        return counties
    
    def get_common_bgs(self, state=None, county=None, year=2019, survey="acs5", geoms=False): 
        self.year = year
        self.survey = survey
        self.c = Census(self.api_key)
        
        if state is None: 
            raise ValueError("Need to provide a state")
        self.stateraw = state
        self.state2 = state
        state = getattr(us.states, state)
        
        if county is not None: 
            self.county=county

        survey = getattr(self.c, survey)
        columns = ['NAME', 'state', 'county', 'tract', 'block group']
        df = pd.DataFrame(columns = columns);
        if self.county is None:
            print("You need a county. Haven't developed a statewide download option yet")
            raise ValueError("Need to provide a state")
        elif self.county is not None:
            for k, v in self.common_acs_tables_dict.items():
                topic = k
                print(f'Working on: {k} ({v})')
                query_results = survey.get(('NAME', f'{topic}'), year = self.year, geo={'for': 'block group:*', 'in': f'state:{state.fips} county: {self.county}'})
                query_results = pd.DataFrame(query_results)
                query_results.county = query_results.county.astype(str)
                df = df.merge(query_results, how='outer', left_on=columns, right_on=columns, sort=True)
            cols = list(df.columns.values)
            for i in columns:
                cols.pop(cols.index(i))
            final_acs_tabular = df.loc[:,columns + cols]
            final_acs_tabular.columns = final_acs_tabular.columns.map(self.rename_dict)
            
            if geoms: 
                final_acs_tabular.loc[:,'geoid'] = final_acs_tabular['state_fips']+final_acs_tabular['county']+final_acs_tabular['tract']+final_acs_tabular['block_group']
                spatial_data = self.get_gpd_blockgroups(year=year, target_state=self.state2, target_counties=[self.county])
                binded_data =  spatial_data.merge(final_acs_tabular, how='outer', left_on='GEOID', right_on='geoid', sort=True)
                cols_to_drop = ['MTFCC', 'FUNCSTAT', 'INTPTLAT', 'INTPTLON']
                final_acs_spatial = binded_data.drop(cols_to_drop, axis = 1)
                print(f'Completed: {i}')
                return final_acs_spatial
            else: 
                print(f'Completed: {i}')
                return final_acs_tabular
        
    def get_gpd_blockgroups(self, year=2019, target_state='None', target_counties=['None']):
        self.target_state = str(target_state)
        self.target_counties = target_counties
        state2 = self.get_state_fips(self.target_state)
        filename = f"tl_{year}_{state2}_bg.zip"
        url = f"https://www2.census.gov/geo/tiger/TIGER{year}/BG/{filename}"
        state_data = gpd.read_file(url)
        state_data = state_data.rename(columns={'geometry':'geom'})
        if (target_counties == ['None']):
            print(f"Done. Grabbed {len(state_data.index)} census block groups for the entire state of {target_state}.")
            return state_data
        else:
            county_data = state_data[state_data['COUNTYFP'].isin(target_counties)]
            print(f"County Done. Successfully retrieved spatial data for {len(county_data.index)} census block groups.")
            return county_data

# x = Census_SSRC(db_conn=False, db_name='p014_sfmta_bike_plan')

# geo_blocks = x.get_common_bgs(state='CA', county='075', year = 2021, geoms=True)
# geo_blocks.head(5)


# db.df_to_postgres(df=geo_blocks[['geom', 'tot_pop', 'geoid', 'ALAND']], 
#                 temp_out_path=os.getcwd(), 
#                 table_name='census_demog',
#                 table_schema= 'automated', 
#                 if_exists='replace',
#                 engine = db.create_db_con('p014_sfmta_bike_plan')[1], 
#                 conn= db.create_db_con('p014_sfmta_bike_plan')[0])
  
# conn = db.create_db_con('p014_sfmta_bike_plan')[0]
# cur = conn.cursor()
# cur.execute("ALTER TABLE automated.census_demog ALTER COLUMN geom TYPE Geometry(Polygon, 7132);")
# conn.commit()
# cur.close()
# conn.close()


# blocks = x.get_common_bgs(state='WA', county='073', year = 2019, geoms=True)

# blocks_tigerline = x.get_gpd_blockgroups(year=2019, target_state='WA', target_counties=['073'])


# x.get_place_fips('Seattle city')
# x.get_state_fips('WA')
# x.get_counties_in_state('WA')


# db.df_to_postgres(df=geo_blocks[['geom', 'tot_pop']], 
#                 temp_out_path=os.getcwd(), 
#                 table_name='census_testing_wa_073',
#                 table_schema= 'automated', 
#                 if_exists='replace',
#                 engine = db.create_db_con()[1], 
#                 conn= db.create_db_con()[0])
  
# conn = db.create_db_con()[0]
# cur = conn.cursor()
# cur.execute("ALTER TABLE automated.census_testing_wa_073 ALTER COLUMN geom TYPE Geometry(Polygon, 4326);")
# conn.commit()
# cur.close()
# conn.close()

